#!/usr/bin/python

import feedparser
import stripogram
import dateutil.parser
import optparse
import sys
import os
import smtplib
import socket
import logging
import ConfigParser

from email.MIMEText import MIMEText
from django.utils.encoding import smart_str

def conf_dir():
    if os.getenv('GRAB_RSS_DIR'):
        return os.getenv('GRAB_RSS_DIR')
    return os.path.join(os.getenv('HOME'), '.grab_rss')

def feedlist():
    feed_file = os.path.join(conf_dir(), 'feeds.txt')

    logging.info('Reading feed list from %s' % (feed_file))

    try:
        input = open(feed_file)
    except IOError:
        raise Exception('No feeds found in %s' % (feed_file))

    for line in input:
        yield line.strip()

def read_config():
    config = ConfigParser.RawConfigParser(
        {
            'from': 'grab-rss@localhost',
            'smtp_host': 'localhost',
            'socket_timeout': '30',
            'user_agent': feedparser.USER_AGENT
        })

    config_file = os.path.join(conf_dir(), 'grab_rss.conf')

    try:
        config.readfp(open(config_file))
    except IOError:
        pass

    return config

class seen_items:
    def __init__(self, filename):
        self.all_seen = set()
        self.filename = filename

        try:
            input = open(self.filename)
            for line in input:
                self.all_seen.add(line.strip())
        except IOError:
            pass

    def save(self):
        output = open(self.filename, 'w')
        for entry in sorted(self.all_seen):
            output.write(entry)
            output.write('\n')
        output.close()

    def seen_this_before(self, item):
        return item in self.all_seen

    def note_as_seen(self, item):
        self.all_seen.add(item)

def wrap(text, width):
    # From http://code.activestate.com/recipes/148061/
    return reduce(lambda line, word, width=width: '%s%s%s' %
                  (line,
                   ' \n'[(len(line)-line.rfind('\n')-1
                         + len(word.split('\n',1)[0]
                              ) >= width)],
                   word),
                  text.split(' ')
                 )

def body_for(entry):

    # Random chars observered that smart_str fails on
    encodings = {
        '\xe2\x80\x93': '\'',
        '\xe2\x80\x99': '\'',
        '\xe2\x80\x9c': '\'',
        '\xe2\x80\x9d': '\'',
        '\xc3\xa1': 'a',
        '\xc2\xa0': '',
        '\xbb': '>>',
        '&#38;': '&',
        '&#038;': '&',
        '&#60;': '<',
        '&#62;': '>',
        '&#xA0;': ' ',
        '&#8216;': '\'',
        '&#8217;': '\'',
        '&#8220;': '\'',
        '&#8221;': '\'',
        '&#8212;': '--',
        '&#8243;': '"',
        }

    timestamp = str(dateutil.parser.parse(entry.get('date', '')))

    s = timestamp + '\n\n' + smart_str(entry.link + '\n\n' +
                                       entry.get('description', ''))

    for (coded,char) in encodings.items():
        s = s.replace(coded, char)

    return wrap(stripogram.html2safehtml(s, valid_tags=('a')), 80)

def feed_name(feed, feed_url):
    try:
        return feed['feed']['title']
    except:
        return feed_url.split('/')[3]

def grab_feeds(from_addr, to_addr):
    state = seen_items(os.path.join(conf_dir(), 'seen.txt'))

    hostname = socket.gethostname()

    for feed_url in feedlist():
        logging.info('Reading %s' % (feed_url))

        feed = feedparser.parse(feed_url)

        feed_title = feed_name(feed, feed_url)

        if len(feed.entries):
            logging.debug('Found %d entries in %s' % (len(feed.entries), feed_url))
        else:
            logging.info('Found no entries in %s' % (feed_url))

        new_entries = 0

        for entry in feed.entries:
            if state.seen_this_before(entry.link):
                continue

            title = entry.get('title', entry.link)

            msg = MIMEText(body_for(entry))
            msg['X-GrabRSS'] = hostname
            msg['Subject'] = '%s - %s' % (feed_title, title)
            msg['From'] = from_addr
            msg['To'] = to_addr
            yield msg

            new_entries += 1

            state.note_as_seen(entry.link)

        logging.debug('Saw %d new items from %s' % (new_entries, feed_url))

        state.save()

def main(argv = None):
    if argv is None:
        argv = sys.argv

    parser = optparse.OptionParser(version='%prog 0.1')

    parser.add_option('-v', '--verbose', action='store_true', dest='verbose', default=False)
    parser.add_option('-q', '--quiet', action='store_true', dest='quiet', default=False)

    (options, args) = parser.parse_args(argv)

    def log_level():
        if options.quiet: # -q overrides -v
            return logging.WARNING
        if options.verbose:
            return logging.DEBUG
        return logging.INFO

    logging.basicConfig(stream = sys.stdout,
                        format = '%(levelname) 7s: %(message)s',
                        level = log_level())

    config = read_config()

    socket.setdefaulttimeout(config.getint('GrabRSS', 'socket_timeout'))
    feedparser.USER_AGENT = config.get('GrabRSS', 'user_agent')

    socket.setdefaulttimeout(10)

    smtp = smtplib.SMTP(config.get('GrabRSS', 'smtp_host'))

    for email in grab_feeds(config.get('GrabRSS', 'from'),
                            config.get('GrabRSS', 'to')):
        smtp.sendmail(email['From'], [email['To']], email.as_string())

    smtp.quit()

if __name__ == '__main__':
    #try:
    sys.exit(main())
    #except Exception, e:
    #    print >>sys.stderr, e
